package leetcode.misc;

import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;

/**
 * Runtime: 277 ms, faster than 1.83% of Java online submissions for Minimize Malware Spread.
 */
public class MinimizeMalwareSpread {

    HashMap<Integer, Set<Integer>> conns = new HashMap<>();
    int[][] graph;
    int[] initial;

    void createMap() {
        for (int i = 0; i < graph.length; i++) {

            HashSet<Integer> set = new HashSet<>();
            conns.put(i, set);
            for (int j = 0; j < graph[0].length; j++) {
                if (i != j && graph[i][j] == 1)
                    set.add(j);
            }
        }
    }

    public int minMalwareSpread(int[][] graph, int[] initial) {
        int result = -1;
        int min = Integer.MAX_VALUE;
        this.graph = graph;
        this.initial = initial;
        Arrays.sort(this.initial);
        createMap();

        for (int i = 0; i < this.initial.length; i++) {

            HashSet<Integer> s = new HashSet<>();
            for (int k = 0; k < this.initial.length; k++)
                s.add(this.initial[k]);

            s.remove(this.initial[i]);

            int count = countInfections(s);
            if (count < min) {
                min = count;
                result = i;
            }
        }

        return this.initial[result];
    }

    int countInfections(HashSet<Integer> toExplore) {

        Set<Integer> allInfected = new HashSet<>();
        allInfected.addAll(toExplore);

        while (!toExplore.isEmpty()) {
            Set<Integer> temp = new HashSet();
            for (Integer i : toExplore) {
                temp.addAll(conns.get(i));
            }

            toExplore.clear();

            for (Integer i : temp) {
                if (!allInfected.contains(i))
                    toExplore.add(i);
            }

            allInfected.addAll(temp);
            temp.clear();
        }

        return allInfected.size();
    }

}
